apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-deployment
  labels:
    app: dev-app
    environment: development
spec:
  replicas: 1  # Solo 1 replica en desarrollo
  selector:
    matchLabels:
      app: dev-app
  template:
    metadata:
      labels:
        app: dev-app
        environment: development
    spec:
      containers:
      - name: dev-app
        image: node:18-alpine
        ports:
        - containerPort: 3000
        
        # Comando para desarrollo con hot-reload
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cd /app
          npm install
          npm run dev
        
        env:
        - name: NODE_ENV
          value: "development"
        - name: PORT
          value: "3000"
        - name: DEBUG
          value: "*"
        - name: HOT_RELOAD
          value: "true"
        
        volumeMounts:
        - name: source-code
          mountPath: /app
        - name: node-modules
          mountPath: /app/node_modules
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          
      volumes:
      # Código fuente montado desde host (para desarrollo)
      - name: source-code
        configMap:
          name: dev-source-code
      
      # Volumen para node_modules (mejor rendimiento)
      - name: node-modules
        emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-source-code
data:
  package.json: |
    {
      "name": "kubernetes-dev-app",
      "version": "1.0.0",
      "description": "Aplicación de desarrollo para Kubernetes",
      "main": "server.js",
      "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js",
        "test": "jest",
        "lint": "eslint ."
      },
      "dependencies": {
        "express": "^4.18.0",
        "helmet": "^6.0.0",
        "cors": "^2.8.5"
      },
      "devDependencies": {
        "nodemon": "^2.0.0",
        "jest": "^29.0.0",
        "eslint": "^8.0.0"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    }

  server.js: |
    const express = require('express');
    const helmet = require('helmet');
    const cors = require('cors');
    
    const app = express();
    const PORT = process.env.PORT || 3000;
    
    // Middleware
    app.use(helmet());
    app.use(cors());
    app.use(express.json());
    
    // Logging middleware
    app.use((req, res, next) => {
        console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
        next();
    });
    
    // Routes
    app.get('/', (req, res) => {
        res.json({
            message: '🚀 Aplicación de Desarrollo en Kubernetes',
            environment: process.env.NODE_ENV,
            version: process.env.npm_package_version || '1.0.0',
            timestamp: new Date().toISOString(),
            pod: process.env.HOSTNAME,
            features: {
                hotReload: process.env.HOT_RELOAD === 'true',
                debug: process.env.DEBUG ? true : false
            }
        });
    });
    
    app.get('/health', (req, res) => {
        res.json({
            status: 'OK',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            version: process.version
        });
    });
    
    app.get('/api/users', (req, res) => {
        res.json({
            users: [
                { id: 1, name: 'Juan Pérez', role: 'developer' },
                { id: 2, name: 'María García', role: 'designer' },
                { id: 3, name: 'Carlos López', role: 'devops' }
            ]
        });
    });
    
    app.post('/api/data', (req, res) => {
        console.log('Data received:', req.body);
        res.json({
            message: 'Datos recibidos correctamente',
            received: req.body,
            timestamp: new Date().toISOString()
        });
    });
    
    // Error handling
    app.use((err, req, res, next) => {
        console.error('Error:', err);
        res.status(500).json({
            error: 'Internal Server Error',
            message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
        });
    });
    
    // 404 handler
    app.use((req, res) => {
        res.status(404).json({
            error: 'Not Found',
            path: req.path
        });
    });
    
    // Start server
    app.listen(PORT, '0.0.0.0', () => {
        console.log(`🚀 Servidor iniciado en puerto ${PORT}`);
        console.log(`📝 Modo: ${process.env.NODE_ENV}`);
        console.log(`🔄 Hot reload: ${process.env.HOT_RELOAD}`);
    });

  .eslintrc.js: |
    module.exports = {
        env: {
            node: true,
            es2021: true,
            jest: true
        },
        extends: [
            'eslint:recommended'
        ],
        parserOptions: {
            ecmaVersion: 12,
            sourceType: 'module'
        },
        rules: {
            'indent': ['error', 4],
            'linebreak-style': ['error', 'unix'],
            'quotes': ['error', 'single'],
            'semi': ['error', 'always'],
            'no-console': 'off'
        }
    };

  nodemon.json: |
    {
      "watch": ["."],
      "ext": "js,json",
      "ignore": ["node_modules/**/*"],
      "delay": 1000,
      "verbose": true
    }
